<%- include('../layouts/admin/header') %>
<div class="main-content" style="margin-top: 70px;">
    <h3 class="sub-heading">Coupons</h3>
    <div class="container">
        <% if (noCoupons) { %>
            <p class="text-center">No coupons found.</p>
        <% } else { %>
            <table id="couponsTable" class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>CODE</th>
                        <th>DISCOUNT</th>
                        <th>MIN AMOUNT</th>
                        <th>EXPIRATION</th>
                        <th>STATUS</th>
                        <th>ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    <% coupons.forEach(coupon => { %>
                        <tr data-coupon-id="<%= coupon._id %>">
                            <td><%= coupon.code %></td>
                            <td><%= coupon.percentage %>%</td>
                            <td>â‚¹<%= coupon.minAmount %></td>
                            <td><%= coupon.expirationDate.toDateString() %></td>
                            <% if(coupon.status === 'active') { %>
                                <td class="text-success"><%= coupon.status %></td>
                            <% } else { %>
                                <td class="text-danger"><%= coupon.status %></td>
                            <% } %>
                            <td>
                                <button type="button" class="custom-button-2 toggle-status"
                                    data-coupon-id="<%= coupon._id %>" data-status="<%= coupon.status %>">
                                    Change status
                                </button>
                                <form action="/admin/coupons/delete/<%= coupon._id %>" method="GET"
                                    style="display: inline;">
                                    <button type="submit" class="custom-button"
                                        onclick="return confirm('Are you sure you want to delete this coupon?')">Delete</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } %>

        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
            Add New Coupon
        </button>
    </div>
</div>






    <!-- Coupon Details Modal -->
    <div class="modal fade" id="couponDetailsModal" tabindex="-1" aria-labelledby="couponDetailsModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="couponDetailsModalLabel">Coupon Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="couponDetailsForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="code" class="form-label">Code</label>
                                    <input type="text" class="form-control" id="code" name="code" style="text-transform: uppercase;">
                                    <div id="codeError" class="text-danger" style="display: none;"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="percentage" class="form-label">Percentage</label>
                                    <input type="text" class="form-control" id="percentage" name="percentage">
                                    <div id="percentageError" class="text-danger" style="display: none;"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="minAmount" class="form-label">Max Amount</label>
                                    <input type="number" class="form-control" id="minAmount" name="minAmount">
                                    <div id="minAmountError" class="text-danger" style="display: none;"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="expirationDate" class="form-label">expirationDate</label>
                                    <input type="date" class="form-control" id="expirationDate" name="expirationDate">
                                    <div id="expirationDateError" class="text-danger" style="display: none;"></div>
                                </div>

                                <input type="hidden" id="couponId" name="couponId">
                            </div>
                            <br>
                            <div class="col-12">
                                <b class="text-success">Created At:</b>
                                <div name="createdAt" id="createdAt"></div>
                                <b class="text-danger">Updated At:</b>
                                <div name="updatedAt" id="updatedAt"></div>
                            </div>
                        </div>
                        <div id="error-message" class="text-danger"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Status Change</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to change the status of this coupon?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmAction">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="/admin/coupons/add" id="addCouponForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="code" class="form-label">Coupon Name</label>
                                    <input type="text" class="form-control" name="code" id="code"
                                        placeholder="Enter Coupon Code" style="text-transform: uppercase;">
                                    <div id="code-error" class="text-danger"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="percentage" class="form-label">Percentage</label>
                                    <input type="number" class="form-control" name="percentage" id="percentage"
                                        placeholder="Enter percentage">
                                    <div id="percentage-error" class="text-danger"></div>
                                </div>
                            </div>
                            <div class="col-md-6">

                                <div class="mb-3">
                                    <label for="minAmount" class="form-label">Maximum Amount</label>
                                    <input type="number" class="form-control" name="minAmount" id="minAmount"
                                        placeholder="Maximum Amount">
                                    <div id="minAmount-error" class="text-danger"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="expirationDate" class="form-label">Expiration Date</label>
                                    <input type="date" class="form-control" name="expirationDate" id="expirationDate">
                                    <div id="expirationDate-error" class="text-danger"></div>
                                </div>
                            </div>
                            <div id="general-error" class="text-danger"></div>
                        </div>

                        <button type="submit" class="btn btn-primary">ADD +</button>
                        <div id="error-message" class="text-danger" style="display:none;"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>





    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutConfirmationModal" tabindex="-1" aria-labelledby="logoutConfirmationModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutConfirmationModalLabel">Logout Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to logout?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmLogoutButton">Logout</button>
                </div>
            </div>
        </div>
    </div>


    <!-- jQuery and DataTables JS -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/js/all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script>
        // Get the sub-heading text
        const subHeadingText = document.querySelector('.sub-heading').textContent;

        // Set the placeholder attribute of the input field
        const searchInput = document.getElementById('customSearch');
        searchInput.placeholder = `Search ${subHeadingText}...`;


        $(document).ready(function () {
            // Initialize the DataTable
            var table = $('.table').DataTable({
                "pageLength": 5, // Show 5 rows at a time
                "lengthChange": false, //option to change the number of rows shown
                "ordering": true, // Enable column ordering
                "info": true, // Disable info showing "Showing X of X entries"
                // "pagingType": "simple", // Simple pagination controls
                "searching": true, // Disable the default search bar
                "language": {
                    "paginate": {
                        "previous": "Previous", // Customize the text
                        "next": "Next" // Customize the text
                    }
                },
                "columnDefs": [
                    { "orderable": false, "targets": [-1] } // Disable ordering on the "Image" (3rd) and "Actions" (last) columns
                ]
            });

            // Apply the search to the custom input field
            $('#customSearch').on('keyup', function () {
                table.search(this.value).draw();
            });
        });


        document.addEventListener('DOMContentLoaded', () => {
            const couponDetailsModal = new bootstrap.Modal(document.getElementById('couponDetailsModal'));

            const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            const couponDetailsForm = document.getElementById('couponDetailsForm');
            let couponIdToToggle = null;

            // Function to format the timestamp
            function formatTimestamp(timestamp) {
                const date = new Date(timestamp);
                const day = date.getDate();
                const month = date.getMonth() + 1;
                const year = date.getFullYear();
                const hours = date.getHours();
                const minutes = date.getMinutes();
                const seconds = date.getSeconds();

                const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
                const formattedSeconds = seconds < 10 ? '0' + seconds : seconds;

                const formattedDate = `${day}/${month}/${year}`;
                const formattedTime = `${hours}:${formattedMinutes}:${formattedSeconds}`;

                return `${formattedDate} ${formattedTime}`;
            }

            //FORMATTED DATE FORMAT
            const formatDateForInput = (dateString) => {
                const date = new Date(dateString);
                return date.toISOString().split('T')[0]; // Extracts only the YYYY-MM-DD part
            };

            let croppers = [];
            let images = [];



            // Handle row clicks to show coupon details modal
            document.querySelectorAll('tr').forEach(row => {
                row.addEventListener('click', async (event) => {
                    if (event.target.closest('.toggle-status')) {
                        return; // Skip row click handling for action buttons
                    }

                    const couponId = row.getAttribute('data-coupon-id');

                    if (couponId) {
                        try {
                            const response = await fetch(`/admin/coupons/${couponId}`);
                            const coupon = await response.json();

                            // Populate the form with coupon details
                            couponDetailsForm.querySelector('#code').value = coupon.code;
                            couponDetailsForm.querySelector('#percentage').value = coupon.percentage;
                            couponDetailsForm.querySelector('#minAmount').value = coupon.minAmount;
                            couponDetailsForm.querySelector('#expirationDate').value = formatDateForInput(coupon.expirationDate);

                            couponDetailsForm.querySelector('#couponId').value = couponId;
                            couponDetailsForm.querySelector('#createdAt').innerHTML = formatTimestamp(coupon.createdAt);
                            couponDetailsForm.querySelector('#updatedAt').innerHTML = formatTimestamp(coupon.updatedAt);

                            couponDetailsModal.show(); // Show the coupon details modal
                        } catch (error) {
                            console.error('Error fetching coupon details:', error);
                        }
                    }
                });
            });



            document.getElementById('couponDetailsForm').addEventListener('submit', async function (e) {
                e.preventDefault(); // Prevent default form submission

                // Clear previous error messages and styles
                const inputs = document.querySelectorAll('.form-control');
                inputs.forEach(input => input.classList.remove('input-error'));

                const errorElements = ['codeError', 'percentageError', 'minAmountError', 'expirationDateError', 'error-message'];
                errorElements.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.style.display = 'none';
                        element.textContent = '';
                    }
                });

                const formData = new FormData(e.target);
                const couponData = {
                    code: formData.get('code'),
                    percentage: formData.get('percentage'),
                    minAmount: formData.get('minAmount'),
                    expirationDate: formData.get('expirationDate'),
                    couponId: formData.get('couponId')
                };

                console.log("formData:", couponData);

                let hasError = false;

                // Client-side validations
                if (!couponData.code) {
                    document.getElementById('codeError').textContent = 'Coupon Code is required.';
                    document.getElementById('codeError').style.display = 'block';
                    document.getElementById('code').classList.add('input-error');
                    hasError = true;
                }

                if (!couponData.percentage || couponData.percentage < 0 || couponData.percentage > 100) {
                    document.getElementById('percentageError').textContent = 'Percentage is required and should be 0 to 100.';
                    document.getElementById('percentageError').style.display = 'block';
                    document.getElementById('percentage').classList.add('input-error');
                    hasError = true;
                }

                if (!couponData.minAmount || couponData.minAmount < 0) {
                    document.getElementById('minAmountError').textContent = 'Max Amount is required and should be valid.';
                    document.getElementById('minAmountError').style.display = 'block';
                    document.getElementById('minAmount').classList.add('input-error');
                    hasError = true;
                }

                // Get today's date in YYYY-MM-DD format
                const today = new Date().toISOString().split('T')[0];

                // Check if the expiration date exists
                if (!couponData.expirationDate) {
                    document.getElementById('expirationDateError').textContent = 'Expiration Date is required.';
                    document.getElementById('expirationDateError').style.display = 'block';
                    document.getElementById('expirationDate').classList.add('input-error');
                    hasError = true;
                } else if (couponData.expirationDate < today) { // Check if the expiration date is in the past
                    document.getElementById('expirationDateError').textContent = 'Expiration Date cannot be in the past.';
                    document.getElementById('expirationDateError').style.display = 'block';
                    document.getElementById('expirationDate').classList.add('input-error');
                    hasError = true;
                } else {
                    document.getElementById('expirationDateError').style.display = 'none';
                    document.getElementById('expirationDate').classList.remove('input-error');
                }


                // If there are client-side validation errors, stop the process
                if (hasError) {
                    return;
                }

                try {
                    const response = await fetch(`/admin/coupons/${formData.get('couponId')}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(couponData)
                    });

                    if (response.ok) {
                        location.reload(); // Reload the page after a successful update
                    } else {
                        const errorData = await response.json();
                        console.error('Backend Error:', errorData.message);

                        const errorMessageElement = document.getElementById('error-message');
                        if (errorMessageElement) {
                            errorMessageElement.textContent = 'Failed to update coupon. Please try again.';
                            errorMessageElement.style.display = 'block';
                        } else {
                            console.error('Error: #error-message element not found in the DOM.');
                        }
                    }
                } catch (error) {
                    console.error('Error updating coupon:', error);

                    const errorMessageElement = document.getElementById('error-message');
                    if (errorMessageElement) {
                        errorMessageElement.textContent = 'Server Error. Please try again later.';
                        errorMessageElement.style.display = 'block';
                    } else {
                        console.error('Error: #error-message element not found in the DOM.');
                    }
                }
            });





            // Handle action button clicks to show confirmation modal
            document.querySelectorAll('.toggle-status').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.stopPropagation(); // Prevent row click event
                    couponIdToToggle = this.getAttribute('data-coupon-id');
                    confirmationModal.show(); // Show the confirmation modal
                });
            });

            // Handle confirmation action
            document.getElementById('confirmAction').addEventListener('click', async () => {
                if (couponIdToToggle) {
                    try {
                        console.log(`Sending request to toggle status for couponId: ${couponIdToToggle}`);
                        const response = await fetch(`/admin/coupons/action/${couponIdToToggle}`, {
                            method: 'POST'
                        });

                        if (response.ok) {
                            const result = await response.json();
                            console.log(`Response received: `, result);

                            // Update the status in the table
                            const row = document.querySelector(`tr[data-coupon-id="${couponIdToToggle}"]`);
                            if (row) {
                                const statusCell = row.querySelector('td:nth-child(5)');
                                statusCell.innerText = result.status;
                                if (result.status === 'active') {
                                    statusCell.classList.remove('text-danger');
                                    statusCell.classList.add('text-success');
                                } else {
                                    statusCell.classList.remove('text-success');
                                    statusCell.classList.add('text-danger');
                                }
                            }
                        } else {
                            const errorResult = await response.json();
                            console.error('error is encountered by:', errorResult.message);
                        }
                    } catch (error) {
                        console.error('Error toggling ssscoupon status:', error);
                    } finally {
                        confirmationModal.hide(); // Hide the confirmation modal
                    }
                }
            });

        });


        //logout Logic
        document.getElementById('logoutButton').addEventListener('click', () => {
            const logoutConfirmationModal = new bootstrap.Modal(document.getElementById('logoutConfirmationModal'));
            logoutConfirmationModal.show();
        });

        document.getElementById('confirmLogoutButton').addEventListener('click', async () => {
            try {
                await fetch('/admin/logout', {
                    method: 'GET',
                    credentials: 'include' // Ensure cookies are sent with the request
                });
                localStorage.removeItem('token'); // Clear the token from local storage
                window.location.href = '/admin'; // Redirect to login page
            } catch (error) {
                console.error('Logout error:', error);
            }
        });

        document.getElementById('addCouponForm').addEventListener('submit', async function (e) {
            e.preventDefault(); // Prevent default form submission

            // Clear all previous error messages
            ['code', 'percentage', 'minAmount', 'expirationDate', 'general'].forEach(field => {
                const errorElement = document.getElementById(`${field}-error`);
                if (errorElement) {
                    errorElement.textContent = '';
                }
            });

            const formData = new FormData(e.target);
            const couponData = {};
            formData.forEach((value, key) => {
                couponData[key] = value;
            });

            try {
                const response = await fetch(e.target.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(couponData) // Send as JSON
                });

                if (!response.ok) {
                    const errors = await response.json();

                    // Display specific error messages from the server response
                    for (const [field, message] of Object.entries(errors)) {
                        const errorElement = document.getElementById(`${field}-error`);
                        if (errorElement) {
                            errorElement.textContent = message;
                        } else {
                            console.error(`Error element not found for field: ${field}`);
                        }
                    }
                } else {
                    // If the request is successful, redirect or handle accordingly
                    window.location.href = '/admin/coupons';
                }
            } catch (error) {
                console.error('Error:', error);
                const generalErrorElement = document.getElementById('general-error');
                if (generalErrorElement) {
                    generalErrorElement.textContent = 'Server error. Please try again later.';
                    generalErrorElement.style.display = 'block';
                }
            }
        });










    </script>

    </body>

    </html>